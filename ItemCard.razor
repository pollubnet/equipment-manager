@using ItemGeneratorModels

<div class="col">
    <div class="card" style="width: 15rem;">
        <div class="card-header" style="background-color: red">
            @Item.Name
        </div>
        <div class="card-body">
            <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onmouseover="ShowItemHistoryAsync" @onmouseleave="HideItemHistoryAsync">Item History </Button>
            <Collapse @ref="collapse1">
                <Card>
                    <p class="card-text">@Item.History</p>
                </Card>
            </Collapse>
            <ItemStats Item="@Item"></ItemStats>

            @if (IsEquipped)
            {
                <button class="btn btn-danger" @onclick="OnUnequipClicked">Unequip this</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="OnEquipClicked">Equip this</button>
            }
        </div>
    </div>
</div>
<div class="collapse">
    @foreach (var item in messages)
    {
        <p>@item</p>
    }
</div>
@code {
    Collapse collapse1 = default!;

    List<string> messages = new List<string>();
    private async Task ShowItemHistoryAsync() => await collapse1.ShowAsync();
    private async Task HideItemHistoryAsync() => await collapse1.HideAsync();
    [Parameter] public Item Item { get; set; } = null!;
    [Parameter] public bool IsEquipped { get; set; }
    [Parameter] public bool ItemHistory { get; set; }
    [Parameter] public EventCallback OnEquipClicked { get; set; }
    [Parameter] public EventCallback OnUnequipClicked { get; set; }
   

}
